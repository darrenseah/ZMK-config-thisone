// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <20 21>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <21 22>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <22 23>;
        };

        ESCe {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        WindowsButton {
            bindings = <&kp LEFT_WIN>;
            key-positions = <2 3>;
        };

        queston {
            bindings = <&kp QUESTION>;
            key-positions = <29 28>;
        };

        exclam {
            bindings = <&kp EXCLAMATION>;
            key-positions = <19 18>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <26 27>;
        };

        com {
            bindings = <&kp COMMA>;
            key-positions = <27 28>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R          &kp T        &kp Y      &kp U  &kp I           &kp O         &kp P
&kp A  &kp S  &kp D  &kp F          &kp G        &kp H      &kp J  &kp K           &kp L         &kp TAB
&kp Z  &kp X  &kp C  &kp V          &kp B        &kp N      &kp M  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCTRL
                     &kp BACKSPACE  &kp ENTER    &kp SPACE  &to 1
            >;
        };

        layer2 {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4   &kp N5       &kp NUMBER_6   &kp N7     &kp N8            &kp N9             &kp N0
&kp DEL       &kp LEFT      &kp UP_ARROW  &kp DOWN       &kp RIGHT    &kp SEMICOLON  &kp SQT    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMI
&kp F1        &kp F2        &kp F3        &kp F4         &kp F8       &kp F10        &kp COMMA  &kp PERIOD        &kp SLASH          &kp LEFT_SHIFT
                                          &kp BACKSPACE  &kp ENTER    &to 0          &to 2
            >;
        };

        layer3 {
            bindings = <
&trans    &kp LBKT  &kp LBRC  &kp RBRC  &trans       &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT  &kp TILDE
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH  &kp GRAVE
&trans    &trans    &trans    &trans    &trans       &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE  &trans
                              &trans    &trans       &to 0      &to 3
            >;
        };

        tri_layer {
            bindings = <
&sys_reset    &trans        &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader   &trans        &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&out OUT_BLE  &out OUT_USB  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                                    &trans      &trans          &to 0   &trans
            >;
        };
    };
};
